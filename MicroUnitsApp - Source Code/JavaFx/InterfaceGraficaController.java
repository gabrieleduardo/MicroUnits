/**
 * MicroUnits - Pauses Analysis of XML files generated by Translog II software.
 * For Translog II details See <http://bridge.cbs.dk/platform/?q=Translog-II>
 *
 * Copyright (C) 2014 Gabriel Ed. da Silva
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package JavaFx;

import Model.MyPdfDocument;
import java.io.File;
import java.net.URL;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.collections.FXCollections;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.TextField;
import javafx.scene.input.MouseEvent;
import javafx.stage.DirectoryChooser;
import javafx.stage.FileChooser;
import javafx.stage.Stage;
import org.controlsfx.dialog.Dialog;

/**
 *
 * @author Gabriel Ed
 */
public class InterfaceGraficaController implements Initializable {

    @FXML
    private TextField pause;
    @FXML
    private TextField arq;
    @FXML
    private TextField dir;
    @FXML
    private ChoiceBox<String> choice;

    @FXML
    private void dChooser(ActionEvent event) {
        DirectoryChooser dc = new DirectoryChooser();
        dc.setTitle("Open resource directory");
        File file = dc.showDialog(new Stage());
        dir.setText(file.toString());
    }

    @FXML
    private void fChooser(ActionEvent event) {
        FileChooser fc = new FileChooser();
        fc.setTitle("Save as");
        fc.setSelectedExtensionFilter(null);
        fc.setInitialDirectory(
                new File(System.getProperty("user.home"))
        );
        fc.getExtensionFilters().addAll(
                new FileChooser.ExtensionFilter("PDF", "*.pdf")
        );
        File file = fc.showSaveDialog(new Stage());
        arq.setText(file.toString());
    }

    @FXML
    private void doAction(MouseEvent event) {
        if (dir.getText().length() > 1) {

            try {
                MyPdfDocument.create(dir.getText(), filenameValidator(arq.getText()), pauseValidator(pause.getText()),
                        typeValidator(choice.getValue()));
            } catch (Exception ex) {
                Dialog dialog;
                dialog = new Dialog(MicroUnitsApp.stage, "Error", true);
                dialog.setContent(ex.getMessage());
                dialog.show();
                Logger.getLogger(InterfaceGraficaController.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        System.out.println("Job Done");
        limparCampos();
    }

    private void limparCampos() {
        dir.setText("");
        pause.setText("");
        arq.setText("");
    }

    private Integer pauseValidator(String st) {
        if (st.matches("[0-9]*")) {
            return Integer.parseInt(st);
        } else {
            return 2400;
        }
    }

    private Integer typeValidator(String st) {
        if (st.equalsIgnoreCase("Both")) {
            return 0;
        } else if (st.equalsIgnoreCase("Basic")) {
            return 1;
        } else if (st.equalsIgnoreCase("Fix")) {
            return 2;
        } else {
            return 0;
        }
    }


    private String filenameValidator(String st) {
        if (st == null) {
            return "MicroUnits.pdf";
        } else if (st.isEmpty()) {
            return "MicroUnits.pdf";
        } else{
            return st;
        }
    }
    

    /*
     * Gets the proper slash to the operating system
     */
    private String getSlash() {
        if (System.getProperty("os.name").startsWith("Windows")) {
            return "\\";
        }

        return "/";
    }

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        choice.setItems(FXCollections.observableArrayList("Both", "Basic", "Fix"));
    }

}
