/**
 * MicroUnits - Pauses Analysis of XML files generated by Translog II software.
 * For Translog II details See <http://bridge.cbs.dk/platform/?q=Translog-II>
 *
 * Copyright (C) 2014 Gabriel Ed. da Silva
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
package Modelo;

import java.util.ArrayList;

/**
 *
 * @author Gabriel Ed
 */
public class MyDoc {

    /**
     * Variaveis básicas
     */
    public String path;

    public ArrayList<Integer> fix;

    public ArrayList<Key> keys;

    public Integer tempoFinal;

    public Integer ifix;

    /**
     * Construtor
     * @param path - Caminho do Documento
     */
    public MyDoc(String path) {
        this.path = path;
        fix = new ArrayList<>();
        keys = new ArrayList<>();
        tempoFinal = 0;
        ifix = 0;
    }

    /**
     * Adiciona uma Fixação a lista
     * @param i - Time de uma fixação
     */
    public void addFix(Integer i) {
        fix.add(i);
    }

    /**
     * Adiciona um objeto Key a lista
     * @param key - Objeto Key
     */
    public void addKey(Key key) {
        keys.add(key);
    }

    /**
     * Analisa a utilização de teclas e as fixações durante um determinado valor
     * de pausa.
     *
     * @param pausa - Tempo de pausa
     * @return
     * @throws java.lang.Exception
     */
    public ArrayList<String> analisarPausasFix(Integer pausa) throws Exception {

        if (keys == null || tempoFinal == null || fix == null) {
            return null;
        }

        //Variaveis
        ArrayList<Integer> vPausas = new ArrayList<>();
        ArrayList<Integer> vCaracteres = new ArrayList<>();
        ArrayList<String> stList = new ArrayList<>();
        Integer TI;
        Integer TF;
        Boolean aux = true;
        Integer dif;
        Integer chars = 0;
        this.ifix = 0;

        stList.add(path);
        TF = keys.get(0).getTime(); // Tempo da Primeira Key

        //Microfixações anteriores a primeira Key
        stList.add("\nFixações anteriores a primeira utilização de tecla: \n");
        stList.add(stFix(TF));
        stList.add("\n\n");
        TI = TF;

        for (int i = 0; i < keys.size() - 1; i++) {
            
            // Adiciona o tempo inicial de um segmento
            if (aux) {
                stList.add("(" + TI + ")");
                aux = false;
                TI = TF;
            }

            dif = keys.get(i + 1).getTime() - keys.get(i).getTime();
            chars += contaCaracteres(keys.get(i).getValue());

            if (dif > pausa) {
                TF = keys.get(i + 1).getTime();
                vPausas.add(dif);
                vCaracteres.add(chars);
                chars = 0;
                stList.add(keys.get(i).getValue());
                stList.add("(" + TF + ")");
                stList.add("\n");
                stList.add(stFix(TF));
                stList.add("\n\n");
                aux = true;
            } else {
                stList.add(keys.get(i).getValue());
            }
        }

        //Verifica o ultimo elemento, calculando o tempo de pausa em relação ao tempo final
        TI = TF;
        TF = tempoFinal;
        int i = keys.size() - 1;
        dif = tempoFinal - keys.get(i).getTime();
        chars += contaCaracteres(keys.get(i).getValue());
        vPausas.add(dif);
        vCaracteres.add(chars);

        if (dif > pausa) {
            stList.add("(" + TI + ")");
            stList.add(keys.get(i).getValue());
            stList.add("(" + TF + ")");
            stList.add("\n");
            stList.add(stFix(TF));
            stList.add("\n\n");

        } else {
            stList.add(keys.get(i).getValue());
            stList.add("(" + TF + ")" + "\n" + stFix(TF));
        }

        stList.add("\n\n###Dados Estatísticos###\n");
        stList.add(stringDadosEstatisticos(vPausas, tempoFinal, pausa));
        stList.add(stringDadosEstatisticosChars(vCaracteres, pausa));
        stList.add("\n#########################\n\n");

        return stList;
    }

    /**
     * Analisa a utilização de teclas durante um determinado valor
     * de pausa.
     *
     * @param pausa - Tempo de pausa
     * @return
     * @throws java.lang.Exception
     */
    public ArrayList<String> analisarPausas(Integer pausa) throws Exception {

        if (keys == null) {
            return null;
        }

        ArrayList<Integer> vPausas = new ArrayList<>();
        ArrayList<Integer> vCaracteres = new ArrayList<>();
        ArrayList<String> stList = new ArrayList<>();

        stList.add(path);
        stList.add("(" + keys.get(0).getTime() + ")");
        Integer dif;
        Integer chars = 0;
        int i;

        // Verifca todos os elementos, menos o ultimo
        for (i = 0; i < keys.size() - 1; i++) {
            //Diferença de tempo entre um item e o próximo
            dif = keys.get(i + 1).getTime() - keys.get(i).getTime();
            chars += contaCaracteres(keys.get(i).getValue());

            if (dif > pausa) {
                vPausas.add(dif);
                vCaracteres.add(chars);
                chars = 0;
                stList.add(keys.get(i).getValue());
                stList.add("(" + dif + ")");
            } else {
                stList.add(keys.get(i).getValue());
            }
        }

        //Verifica o ultimo elemento, calculando o tempo de pausa em relação ao tempo final
        dif = tempoFinal - keys.get(i).getTime();
        chars += contaCaracteres(keys.get(i).getValue());
        vPausas.add(dif);

        if (dif > pausa) {
            stList.add(keys.get(i).getValue());
            stList.add("(" + dif + ")");
        } else {
            stList.add(keys.get(i).getValue());
        }
        stList.add("\n###Dados Estatísticos###\n");
        stList.add(stringDadosEstatisticos(vPausas, tempoFinal, pausa));
        stList.add(stringDadosEstatisticosChars(vCaracteres, pausa));
        stList.add("\n#########################");

        return stList;
    }
    
    /*
        Verifica as microtransações durante o ultimo segmento de pausa.
    */

    private String stFix(Integer TF) {
        if (ifix >= fix.size()) {
            return "";
        }
        Integer ac = 0;
        Integer sum = 0;
        Integer desconto = fix.get(ifix);

        while (ifix < fix.size() && fix.get(ifix) <= TF) {
            ac++;
            sum += fix.get(ifix) - desconto;
            desconto = fix.get(ifix);
            ifix++;
        }

        return "Fixações: " + ac + " // Média de " + (sum / ac) + " milissegundos // Duração Total: " + sum;
    }

    /*
     * Conta a quantidade de caracteres de uma string. Caso seja um comando, é
     * considerado como apenas um caractere.
     */
    private static Integer contaCaracteres(String st) {
        if (st == null) {
            return 0;
        } else if (st.startsWith("[")) {
            return 1;
        } else {
            return st.length();
        }
    }

    /*
     * Calcula a Média, Desvio Padrão, mínimo e máximo  de caracters entre pausas.
     * Retorna uma String formatada com os dados.
     */
    private static String stringDadosEstatisticosChars(ArrayList<Integer> v, Integer pausa) {
        Statistic statistic = new Statistic<>();
        Double media = statistic.calcMedia(v);
        Double desvioP = statistic.calcDevioPadrao(v, media);
        Double max = statistic.max(v);
        Double min = statistic.min(v);

        String retorno = "\nMédia de caracteres entre pausas maiores que " + pausa + ": " + format2f(media) + "\n"
                + "Desvio Padrão de caracteres entre pausas maiores que " + pausa + ": " + format2f(desvioP) + "\n"
                + "Mínimo de caracteres entre pausas maiores que " + pausa + ": " + format2f(min) + "\n"
                + "Máximo de caracteres entre pausas maiores que " + pausa + ": " + format2f(max) + "\n";

        return retorno;

    }

    /*
     * Calcula a Média, Desvio Padrão, mínimo e máximo de tempo entre pausas.
     * Retorna uma String formatada com os dados.
     */
    private static String stringDadosEstatisticos(ArrayList<Integer> v, Integer tempoFinal, Integer pausa) {
        Statistic statistic = new Statistic<>();
        Double media = statistic.calcMedia(v);
        Double desvioP = statistic.calcDevioPadrao(v, media);
        Double max = statistic.max(v);
        Double min = statistic.min(v);

        String retorno = "Tempo total da tarefa: " + tempoFinal + " \n" + ""
                + "Média dos tempos de pausa maiores que " + pausa + ": " + format2f(media) + "\n"
                + "Desvio Padrão dos tempos de pausa maiores que " + pausa + ": " + format2f(desvioP) + "\n"
                + "Tempo Mínimo entre pausas maiores que " + pausa + ": " + format2f(min) + "\n"
                + "Tempo Máximo entre pausas maiores que " + pausa + ": " + format2f(max) + "\n";

        return retorno;

    }

    // Formata números Doble para duas casas decimais
    private static String format2f(Number n) {
        return String.format("%.2f", n);
    }
}
