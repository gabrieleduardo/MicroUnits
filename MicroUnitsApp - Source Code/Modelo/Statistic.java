/**
 * MicroUnits - Pauses Analysis of XML files generated by Translog II software.
 * For Translog II details See <http://bridge.cbs.dk/platform/?q=Translog-II>
 *
 * Copyright (C) 2014 Gabriel Ed. da Silva
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package Modelo;

import java.util.ArrayList;

/**
 *
 * @author Gabriel Ed
 * @param <T> - Classe Numérica
 */
public class Statistic<T extends Number> {

    /**
     * Calcula a Média Aritmética
     *
     * @param list - ArrayList de números
     * @return
     */
    public Double calcMedia(ArrayList<T> list) {
        if (list.isEmpty()) {
            return 0.0;
        }

        Double sum = 0.0;
        for (T x : list) {
            sum += x.doubleValue();
        }

        return sum / list.size();
    }

    /**
     * Calcula o Desvio Padrão
     *
     * @param list - ArrayList de números
     * @param media - Média Aritmética dos Dados
     * @return
     */
    public Double calcDevioPadrao(ArrayList<T> list, T media) {
        Double sum = 0.0;

        if (list.size() <= 1) {
            return 0.0;
        }

        for (T x : list) {
            sum = Math.pow(x.doubleValue() - media.doubleValue(), 2.0);
        }

        return Math.sqrt(sum / (list.size() - 1.0));
    }

    /**
     * Calcula o valor máximo
     *
     * @param list - ArrayList de números
     * @return
     */
    public Double max(ArrayList<T> list) {
        if (list.isEmpty()) {
            return null;
        }

        Double max = Double.MIN_VALUE;

        for (T x : list) {
            if (x.doubleValue() > max) {
                max = x.doubleValue();
            }
        }
        return max;
    }

    /**
     * Calcula o valor mínimo
     *
     * @param list - ArrayList de números
     * @return
     */
    public Double min(ArrayList<T> list) {
        if (list.isEmpty()) {
            return null;
        }

        Double min = Double.MAX_VALUE;

        for (T x : list) {
            if (x.doubleValue() < min) {
                min = x.doubleValue();
            }
        }
        return min;
    }
}
