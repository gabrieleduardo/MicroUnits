/**
 * MicroUnits - Pauses Analysis in XML files generated by Translog II software.
 * For Translog II details See <http://bridge.cbs.dk/platform/?q=Translog-II>
 *
 * Copyright (C) 2014 Gabriel Ed. da Silva
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

package MicroUnits;

import java.util.ArrayList;

/**
 *
 * @author Gabriel Ed
 */
public class Key {

    private Integer time;
    private String value;
    private String text;

    /**
     * Construtor da Classe Key
     * @param time - Campo Time do XML
     * @param value - Campo Value do XML
     */
    public Key(Integer time, String value) {
        this.time = time;
        this.value = value;
    }

    /**
     * Recupera o campo Time
     * @return the time
     */
    public Integer getTime() {
        return time;
    }

    /**
     * Atualiza o campo Time
     * @param time the time to set
     */
    public void setTime(Integer time) {
        this.time = time;
    }

    /**
     * Recupera o campo Value
     * @return the value
     */
    public String getValue() {
        return value;
    }

    /**
     * Atualiza o campo Value
     * @param value the value to set
     */
    public void setValue(String value) {
        this.value = value;
    }

    /**
     * Analisa a utilização de teclas durante um determinado valor de pausa.
     * @param path - Endereço do Arquivo XML
     * @param pausa - Tempo de pausa
     * @return
     */
    public static ArrayList<String> analisarPausas(String path, Integer pausa) {

        ArrayList<Key> keys;
        keys = Parse.parseKeys(path);
        Integer tempoFinal = Parse.parseTempoFinal(path);
        ArrayList<Integer> vPausas = new ArrayList<>();
        ArrayList<Integer> vCaracteres = new ArrayList<>();
        ArrayList<String> stList = new ArrayList<>();

        if (keys == null || tempoFinal == null) {
            return null;
        }

        stList.add(path);
        stList.add("(" + keys.get(0).getTime() + ")");
        Integer dif;
        Integer chars = 0;
        int i;

        // Verifca todos os elementos, menos o ultimo
        for (i = 0; i < keys.size() - 1; i++) {
            //Diferença de tempo entre um item e o próximo
            dif = keys.get(i + 1).getTime() - keys.get(i).getTime();
            chars += contaCaracteres(keys.get(i).getValue());

            if (dif > pausa) {
                vPausas.add(dif);
                vCaracteres.add(chars);
                chars = 0;
                stList.add("(" + dif + ")");
                stList.add(keys.get(i).getValue());
            }

            stList.add(keys.get(i).getValue());

        }

        //Verifica o ultimo elemento, calculando o tempo de pausa em relação ao tempo final
        dif = tempoFinal - keys.get(i).getTime();
        chars += contaCaracteres(keys.get(i).getValue());
        vPausas.add(dif);

        if (dif > pausa) {

            stList.add("(" + dif + ")");
            stList.add(keys.get(i).getValue());
        }

        stList.add(keys.get(i).getValue());

        stList.add("\n###Dados Estatísticos###\n");
        stList.add(stringDadosEstatisticos(vPausas, tempoFinal, pausa));
        stList.add(stringDadosEstatisticosChars(vCaracteres, pausa));
        stList.add("\n#########################");

        return stList;
    }
    
    /*
     * Conta a quantidade de caracteres de uma string. Caso seja um comando, é
     * considerado como apenas um caractere.
     */

    private static Integer contaCaracteres(String st) {
        if (st == null) {
            return 0;
        } else if (st.startsWith("[")) {
            return 1;
        } else {
            return st.length();
        }
    }
    
    /*
     * Calcula a Média, Desvio Padrão, mínimo e máximo  de caracters entre pausas.
     * Retorna uma String formatada com os dados.
     */


    private static String stringDadosEstatisticosChars(ArrayList<Integer> v, Integer pausa) {
        Statistic statistic = new Statistic<>();
        Double media = statistic.calcMedia(v);
        Double desvioP = statistic.calcDevioPadrao(v, media);
        Double max = statistic.max(v);
        Double min = statistic.min(v);

        String retorno = "\nMédia de caracteres para pausas maiores que " + pausa + ": " + format2f(media) + "\n"
                + "Desvio Padrão de caracteres para pausas maiores que " + pausa + ": " + format2f(desvioP) + "\n"
                + "Mínimo de caracteres entre pausas maiores que " + pausa + ": " + format2f(min) + "\n"
                + "Máximo de caracteres entre pausas maiores que " + pausa + ": " + format2f(max) + "\n";

        return retorno;

    }

    /*
     * Calcula a Média, Desvio Padrão, mínimo e máximo de tempo entre pausas.
     * Retorna uma String formatada com os dados.
     */
    
    private static String stringDadosEstatisticos(ArrayList<Integer> v, Integer tempoFinal, Integer pausa) {
        Statistic statistic = new Statistic<>();
        Double media = statistic.calcMedia(v);
        Double desvioP = statistic.calcDevioPadrao(v, media);
        Double max = statistic.max(v);
        Double min = statistic.min(v);

        String retorno = "Tempo total da tarefa: " + tempoFinal + " \n" + ""
                + "Média dos tempos de pausa maiores que " + pausa + ": " + format2f(media) + "\n"
                + "Desvio Padrão dos tempos de pausa maiores que " + pausa + ": " + format2f(desvioP) + "\n"
                + "Tempo Mínimo entre pausas maiores que " + pausa + ": " + format2f(min) + "\n"
                + "Tempo Máximo entre pausas maiores que " + pausa + ": " + format2f(max) + "\n";

        return retorno;

    }
    
    // Formata números Doble para duas casas decimais

    private static String format2f(Number n) {
         return String.format("%.2f",n); 
    }

}
